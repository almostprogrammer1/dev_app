# Java Gradle CircleCI 2.0 configuration file
# See: https://circleci.com/docs/language-java/
version: 2.1
###
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  build:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      # specify the version you desire here
      - image: cimg/openjdk:17.0.9

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout

      # Download and cache dependencies
#      - restore_cache:
#          keys:
#            - v1-dependencies-{{ checksum "build.gradle" }}
#            # fallback to using the latest cache if no exact match is found
#            - v1-dependencies-

#      - run: cd ~/repo/dev_app/
#
#      - save_cache:
#          paths:
#            - ~/dev_app/dev_app
#          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run tests!
      - run:
          command: |
            cd ~/repo/dev_app/
            dir
            gradle test

      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/
            cd ~/repo/dev_app/build/test-results/test/
            dir
            find ~/repo/dev_app/build/test-results/test/ -type f -name '*.xml'  -exec cp {} ~/test-results/ \;
          when: always
      - store_test_results:
          path: ~/test-results

      - checkout
      - run:
          name: Analyze on SonarCloud
          command: |
            cd ~/repo/dev_app/
            dir
            gradle build sonar -Dsonar.host.url=https://sonarcloud.io;

workflows:
   main:
    jobs:
      - build:
          context: SonarCloud